package rmi_de2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Client {
	public static void main(String[] args) throws RemoteException, NotBoundException {
		try {
			Registry registry = LocateRegistry.getRegistry(9630);
			IUser userDAO = (IUser) registry.lookup("userDAO");
			IStudent studentDAO = (IStudent) registry.lookup("studentDAO");
			BufferedReader line = new BufferedReader(new InputStreamReader(System.in));
			String userInput = "";
			String status ="";
			String username = "", password = "";
			boolean isLogin = false;
			
			System.out.println("WELCOME TO MANAGE PRODUCT SYSTEM");
			while (true) {
				try {
					userInput = line.readLine();
					
					if (!isLogin) {
						StringTokenizer tokenizer = new StringTokenizer(userInput, "\t");
						String cmd = tokenizer.nextToken().toUpperCase();
						String param = tokenizer.hasMoreTokens() ? tokenizer.nextToken() : "";
						if ("EXIT".equalsIgnoreCase(userInput)) {
							System.out.println("EXIT System....");
							break;
						}
						switch (cmd) {
						case "USER": {
							username = param;
							status = (userDAO.checkUsername(username)) ? "OK" : "FALSE";
							System.out.println("Username: " + status);
							break;
						}
						case "PASS": {
							password = param;
							isLogin = userDAO.login(username, password);
							status = (isLogin) ? "OK" : "FALSE";
							System.out.println("Login: " + status);
							if (!isLogin) {
						        System.out.println("Invalid username or password. Please try again.");
						    } else {
						        System.out.println("Login successful! You can now manage students.");
						    }
							break;
						}
						default:
							System.out.println("WRONG CMD !!!");
						}
					} else {
						StringTokenizer tokenizer = new StringTokenizer(userInput, "\t");
						String cmd = tokenizer.nextToken().toUpperCase();
						List<String> parameters = new ArrayList<>();
						while (tokenizer.hasMoreTokens()) {
						    parameters.add(tokenizer.nextToken());
						}
						if ("QUIT".equalsIgnoreCase(userInput)) {
							System.out.println("EXIT System....");
							break;
						}
						switch (cmd) {
						case "ADD": {
							if (parameters.size() != 4) {
						        System.out.println("WRONG CMD !!! ADD requires 4 parameters.");
						        break;
						    }
						    try {
						        int id = Integer.parseInt(parameters.get(0));
						        String name = parameters.get(1);
						        int age = Integer.parseInt(parameters.get(2));
						        double score = Double.parseDouble(parameters.get(3));
						        Student student = new Student(id, name, age, score);
						        status = (studentDAO.add(student)) ? "OK" : "FALSE";
						        System.out.println("ADD Student: " + status);
						    } catch (NumberFormatException e) {
						        System.out.println("WRONG CMD !!! Invalid number format.");
						    }
						    break;
						}
						case "REMOVE": {
							if (parameters.size() != 1) {
				                System.out.println("WRONG CMD !!! REMOVE requires 1 parameter.");
				                break;
				            }
				            try {
				                int id = Integer.parseInt(parameters.get(0));
				                status = (studentDAO.remove(id)) ? "OK" : "FALSE";
				                System.out.println("Remove Student ID: " + status);
				            } catch (NumberFormatException e) {
				                System.out.println("WRONG CMD !!! Invalid ID format.");
				            }
				            break;
						}
						case "VIEW": {
							List<Student> students = (studentDAO.view(parameters.get(0)));
							System.out.println("View Table Student");
							if (students.isEmpty()) {
						        System.out.println("No students found.");
						    } else {
						        System.out.println("View Table Student:");
						        for (Student student : students) {
						            System.out.println(student.toString());
						        }
						    }
							break;
						}
						case "FBN": {
							List<Student> students = (studentDAO.viewByName(parameters.get(0)));
							System.out.println("View Table By Name Student: " + parameters.get(0));
							for (Student student : students) {
								System.out.println(status.toString());
							}
							break;
						}
						default:
							System.out.println("WRONG CMD !!!");
						}
					}
				} catch (IOException e) {
					System.out.println("WRONG CMD !!!");
				}
			}
		} catch (Exception e) {
			System.out.println("WRONG CMD !!!");
		}
	}
}
